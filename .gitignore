*.rbc
capybara-*.html
.rspec
/log
/tmp
/db/*.sqlite3
/db/*.sqlite3-journal
/public/system
/coverage/
/spec/tmp
*.orig
rerun.txt
pickle-email-*.html

# TODO Comment out this rule if you are OK with secrets being uploaded to the repo
config/initializers/secret_token.rb

# Only include if you have production secrets in this file, which is no longer a Rails default
# config/secrets.yml

# dotenv
# TODO Comment out this rule if environment variables can be committed
.env

## Environment normalization:
/.bundle
/vendor/bundle

# these should all be checked in to normalize the environment:
# Gemfile.lock, .ruby-version, .ruby-gemset

# if using bower-rails ignore default bower_components path bower.json files
/vendor/assets/bower_components
*.bowerrc
bower.json

# Ignore pow environment settings
.powenv

# Ignore Byebug command history file.
.byebug_history

# Ignore node_modules
node_modules/



/coverage/
/spec/tmp
**.orig
/config/local_env.yml
#/config/secrets.yml
.rbenv-vars

.byebug_history

#Looks like your app's ./bin/rails is a stub that was generated by Bundler.
#
#In Rails 4, your app's bin/ directory contains executables that are versioned
#like any other source code, rather than stubs that are generated on demand.
#
#Here's how to upgrade:
#
#  bundle config --delete bin    # Turn off Bundler's stub generator
#  rake rails:update:bin         # Use the new Rails 4 executables
#  git add bin                   # Add bin/ to source control
#
#You may need to remove bin/ from your .gitignore as well.
#
#When you install a gem whose executable you want to use in your app,
#generate it and add it to source control:
#
#  bundle binstubs some-gem-name
#  git add bin/new-executable

#/bin

# Ignore any .docx files used for testing
*.docx

public/uploads
vendor
